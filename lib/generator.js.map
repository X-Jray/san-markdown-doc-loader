{"version":3,"sources":["generator.js"],"names":["fs","require","path","hash","transform","CODE_BLOCK_NAME","_","relative","findAll","appendChild","getInnerHTML","getOuterHTML","generateCodeBlock","options","node","originPath","targetPath","index","source","children","filter","child","type","name","attribs","src","forEach","textNode","script","data","normalizeDependences","code","components","content","snippetFileName","basename","unique","snippetFilePath","join","dirname","writeFileSync","componentName","camelCase","toLowerCase","local","capitalize","filePath","mainFilePath","resolveComponents","root","generateScriptByComponents","length","importContent","map","component","componentContent","relativeSanCodeBlockPath","__dirname","wrapRoot","ast","section","template","generate","cacheDir","filename","targetFilePath","trim","module","exports"],"mappings":"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","file":"generator.js","sourcesContent":["/**\n * @file generator\n * @author leon <ludafa@outlook.com>\n */\n\n/* eslint-disable fecs-no-require */\n\nconst fs = require('fs');\nconst path = require('path');\nconst hash = require('shorthash');\nconst transform = require('./transform');\nconst {CODE_BLOCK_NAME} = require('./constants');\nconst _ = require('lodash');\nconst relative = require('require-path-relative');\nconst {findAll, appendChild} = require('domutils');\nconst {getInnerHTML, getOuterHTML} = require('./util');\n\nfunction generateCodeBlock(options) {\n\n    let {\n        node,\n        originPath,\n        targetPath,\n        index\n    } = options;\n\n    let source = getInnerHTML(node);\n\n    // 对顶级的 script 标签内部做路径调整\n    node.children\n        .filter(child => (\n            child.type === 'script'\n            && child.name === 'script'\n            && !(child.attribs && child.attribs.src)\n        ))\n        .forEach(script => {\n\n            let textNode = script.children[0];\n\n            textNode.data = transform.normalizeDependences({\n                code: textNode.data,\n                targetPath,\n                originPath,\n                components: []\n            });\n\n        });\n\n    let content = getInnerHTML(node);\n\n    let snippetFileName = `${path.basename(originPath)}.snippet-${hash.unique(source)}`;\n    let snippetFilePath = path.join(\n        path.dirname(targetPath),\n        `${snippetFileName}.san`\n    );\n\n    fs.writeFileSync(snippetFilePath, content, 'utf8');\n\n    let componentName = _.camelCase(snippetFileName).toLowerCase();\n\n    // 用 snippet 替换掉 code block 的原有内容\n    node.children = [];\n    appendChild(node, {\n        name: componentName,\n        type: 'tag',\n        attribs: {},\n        children: []\n    });\n\n    return {\n        componentName,\n        source: `./${snippetFileName}.san`,\n        local: _.capitalize(_.camelCase(snippetFileName)),\n        filePath: snippetFilePath,\n        mainFilePath: targetPath,\n        originPath,\n        index\n    };\n\n}\n\nfunction resolveComponents(root) {\n\n    return findAll(\n        node => (\n            node.type === 'tag'\n            && node.name === CODE_BLOCK_NAME\n        ),\n        root.children\n    );\n\n}\n\nfunction generateScriptByComponents(options) {\n\n    let {\n        components,\n        targetPath\n    } = options;\n\n    if (!components || !components.length) {\n        return '';\n    }\n\n    let importContent = components.map(component => {\n\n        let {\n            source,\n            local\n        } = component;\n\n        return `import ${local} from '${source}';`;\n\n    }).join('\\n');\n\n    let componentContent = components.map(component => {\n\n        let {\n            local,\n            componentName\n        } = component;\n\n        return `'${componentName}': ${local}`;\n\n    }).join(',\\n');\n\n    let relativeSanCodeBlockPath = relative(\n        path.dirname(targetPath),\n        path.join(__dirname, './component/SanCodeBlock.js')\n    );\n\n    return `\\\n${importContent}\nimport SanCodeBlock from '${relativeSanCodeBlockPath}';\nexport default {\n    components: {\n        'san-code-block': SanCodeBlock,\n        ${componentContent}\n    }\n};`;\n\n}\n\nfunction wrapRoot(ast) {\n\n    let section = {\n        type: 'tag',\n        name: 'section',\n        attribs: {\n            'class': 'san-markdown-loader-wrapper'\n        },\n        children: []\n    };\n\n    ast.forEach(node => appendChild(section, node));\n\n    let template = {\n        type: 'tag',\n        name: 'template',\n        children: []\n    };\n\n    appendChild(template, section);\n\n    return template;\n}\n\nfunction generate(options) {\n\n    let {\n        source,\n        ast,\n        filePath,\n        cacheDir\n    } = options;\n\n    let filename = `${path.basename(filePath)}.${hash.unique(source)}.san`;\n    let targetFilePath = path.join(cacheDir, filename);\n    let template = wrapRoot(ast);\n    let components = resolveComponents(template);\n    let script;\n\n    if (components && components.length) {\n        components = components.map((component, index) => (\n            generateCodeBlock({\n                node: component,\n                originPath: filePath,\n                targetPath: targetFilePath,\n                index\n            })\n        ));\n        script = generateScriptByComponents({\n            components,\n            targetPath: targetFilePath,\n            originPath: filePath\n        });\n    }\n\n    let content = `\\\n${getOuterHTML(template)}\n<script>\n    ${script}\n</script>`;\n\n    fs.writeFileSync(targetFilePath, content.trim(), 'utf8');\n\n    return {\n        content,\n        filePath: targetFilePath\n    };\n\n}\n\nmodule.exports = {\n    generate\n};\n"]}