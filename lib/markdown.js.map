{"version":3,"sources":["markdown.js"],"names":["markdown","require","hljs","MarkdownItSanCodeBlock","replaceDelimiters","str","replace","renderHighlight","lang","getLanguage","highlight","value","err","module","exports","options","Object","assign","preset","html","plugins","use","md","length","forEach","Array","isArray","plugin","apply","codeInlineRender","renderer","rules","code_inline","arguments"],"mappings":";;AAAA;;;;;AAKA;;AAEA,IAAMA,WAAWC,QAAQ,aAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,cAAR,CAAb;AACA,IAAME,yBAAyBF,QAAQ,mCAAR,CAA/B;;AAEA;;;;;;;;AAQA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgC;AAC5B,WAAOA,IAAIC,OAAJ,CAAY,UAAZ,EAAwB,iBAAxB,CAAP;AACH;;AAED,SAASC,eAAT,CAAyBF,GAAzB,EAA8BG,IAA9B,EAAoC;;AAEhC,QAAI,EAAEA,QAAQN,KAAKO,WAAL,CAAiBD,IAAjB,CAAV,CAAJ,EAAuC;AACnC,eAAO,EAAP;AACH;;AAED,QAAI;AACA,eAAOJ,kBAAkBF,KAAKQ,SAAL,CAAeF,IAAf,EAAqBH,GAArB,EAA0B,IAA1B,EAAgCM,KAAlD,CAAP;AACH,KAFD,CAGA,OAAOC,GAAP,EAAY,CAAE;AAEjB;;AAEDC,OAAOC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;;AAEhCA,cAAUC,OAAOC,MAAP,CACN;AACIC,gBAAQ,SADZ;AAEIC,cAAM,IAFV;AAGIT,mBAAWH;AAHf,KADM,EAMNQ,OANM,CAAV;;AASA,QAAIG,SAASH,QAAQG,MAArB;AACA,QAAIE,UAAUL,QAAQM,GAAtB;;AAEA,WAAON,QAAQG,MAAf;AACA,WAAOH,QAAQM,GAAf;;AAGA,QAAIC,KAAKtB,SAASkB,MAAT,EAAiBH,OAAjB,CAAT;;AAEA,QAAIK,WAAWA,QAAQG,MAAvB,EAA+B;AAC3BH,gBAAQI,OAAR,CAAgB,kBAAU;AACtB,gBAAIC,MAAMC,OAAN,CAAcC,MAAd,CAAJ,EAA2B;AACvBL,mBAAGD,GAAH,CAAOO,KAAP,CAAaN,EAAb,EAAiBK,MAAjB;AACH,aAFD,MAGK;AACDL,mBAAGD,GAAH,CAAOM,MAAP;AACH;AACJ,SAPD;AAQH;;AAEDL,OAAGD,GAAH,CAAOlB,sBAAP;;AAEA,QAAI0B,mBAAmBP,GAAGQ,QAAH,CAAYC,KAAZ,CAAkBC,WAAzC;AACAV,OAAGQ,QAAH,CAAYC,KAAZ,CAAkBC,WAAlB,GAAgC,YAAY;AACxC,eAAO5B,kBAAkByB,iBAAiBD,KAAjB,CAAuB,IAAvB,EAA6BK,SAA7B,CAAlB,CAAP;AACH,KAFD;AAGA,WAAOX,EAAP;AACH,CAtCD","file":"markdown.js","sourcesContent":["/**\n * @file markdown\n * @author leon <ludafa@outlook.com>\n */\n\n/* eslint-disable fecs-camelcase, prefer-rest-params, fecs-prefer-destructure, fecs-no-require */\n\nconst markdown = require('markdown-it');\nconst hljs = require('highlight.js');\nconst MarkdownItSanCodeBlock = require('./markdown-it-plugin/SanCodeBlock');\n\n/**\n * 转码 {{}}\n *\n * `{{ }}` => `<span>{{</span> <span>}}</span>`\n *\n * @param  {string} str 源码\n * @return {string}\n */\nfunction replaceDelimiters(str) {\n    return str.replace(/({{|}})/g, '<span>$1</span>');\n}\n\nfunction renderHighlight(str, lang) {\n\n    if (!(lang && hljs.getLanguage(lang))) {\n        return '';\n    }\n\n    try {\n        return replaceDelimiters(hljs.highlight(lang, str, true).value);\n    }\n    catch (err) {}\n\n}\n\nmodule.exports = function (options) {\n\n    options = Object.assign(\n        {\n            preset: 'default',\n            html: true,\n            highlight: renderHighlight\n        },\n        options\n    );\n\n    let preset = options.preset;\n    let plugins = options.use;\n\n    delete options.preset;\n    delete options.use;\n    \n\n    let md = markdown(preset, options);\n\n    if (plugins && plugins.length) {\n        plugins.forEach(plugin => {\n            if (Array.isArray(plugin)) {\n                md.use.apply(md, plugin);\n            }\n            else {\n                md.use(plugin);\n            }\n        });\n    }\n\n    md.use(MarkdownItSanCodeBlock);\n\n    let codeInlineRender = md.renderer.rules.code_inline;\n    md.renderer.rules.code_inline = function () {\n        return replaceDelimiters(codeInlineRender.apply(this, arguments));\n    };\n    return md;\n};\n"]}