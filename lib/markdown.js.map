{"version":3,"sources":["markdown.js"],"names":["markdown","require","hljs","MarkdownItSanCodeBlock","replaceDelimiters","str","replace","renderHighlight","lang","getLanguage","highlight","value","err","module","exports","options","Object","assign","preset","html","plugins","use","renderer","renderAttrs","token","nesting","attrs","hasClassName","i","len","length","push","call","md","forEach","Array","isArray","plugin","apply","codeInlineRender","rules","code_inline","arguments"],"mappings":";;AAAA;;;;;AAKA;;AAEA,IAAMA,WAAWC,QAAQ,aAAR,CAAjB;AACA,IAAMC,OAAOD,QAAQ,cAAR,CAAb;AACA,IAAME,yBAAyBF,QAAQ,mCAAR,CAA/B;;AAEA;;;;;;;;AAQA,SAASG,iBAAT,CAA2BC,GAA3B,EAAgC;AAC5B,WAAOA,IAAIC,OAAJ,CAAY,UAAZ,EAAwB,iBAAxB,CAAP;AACH;;AAED,SAASC,eAAT,CAAyBF,GAAzB,EAA8BG,IAA9B,EAAoC;;AAEhC,QAAI,EAAEA,QAAQN,KAAKO,WAAL,CAAiBD,IAAjB,CAAV,CAAJ,EAAuC;AACnC,eAAO,EAAP;AACH;;AAED,QAAI;AACA,eAAOJ,kBAAkBF,KAAKQ,SAAL,CAAeF,IAAf,EAAqBH,GAArB,EAA0B,IAA1B,EAAgCM,KAAlD,CAAP;AACH,KAFD,CAGA,OAAOC,GAAP,EAAY,CAAE;AAEjB;;AAEDC,OAAOC,OAAP,GAAiB,UAAUC,OAAV,EAAmB;;AAEhCA,cAAUC,OAAOC,MAAP,CACN;AACIC,gBAAQ,SADZ;AAEIC,cAAM,IAFV;AAGIT,mBAAWH;AAHf,KADM,EAMNQ,OANM,CAAV;;AASA,QAAIG,SAASH,QAAQG,MAArB;AACA,QAAIE,UAAUL,QAAQM,GAAtB;;AAEA,WAAON,QAAQG,MAAf;AACA,WAAOH,QAAQM,GAAf;;AAEA,QAAIC,WAAWtB,SAASsB,QAAxB;AACA,QAAIC,cAAcD,SAASC,WAA3B;;AAEAvB,aAASsB,QAAT,CAAkBC,WAAlB,GAAgC,UAAUC,KAAV,EAAiB;;AAE7C,YAAIA,MAAMC,OAAN,KAAkB,CAAC,CAAvB,EAA0B;AACtB,mBAAO,EAAP;AACH;;AAED,YAAIC,QAAQF,MAAME,KAAlB;;AAEA,YAAI,CAACA,KAAL,EAAY;AACRA,oBAAQF,MAAME,KAAN,GAAc,EAAtB;AACH;;AAED,YAAIC,eAAe,KAAnB;AACA,aAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMH,MAAMI,MAA5B,EAAoCF,IAAIC,GAAxC,EAA6CD,GAA7C,EAAkD;AAC9C,gBAAIF,MAAME,CAAN,EAAS,CAAT,MAAgB,OAApB,EAA6B;AACzBF,sBAAME,CAAN,EAAS,CAAT,KAAe,KAAf;AACAD,+BAAe,IAAf;AACA;AACH;AACJ;;AAGD,YAAI,CAACA,YAAL,EAAmB;AACfD,kBAAMK,IAAN,CAAW,CAAC,OAAD,EAAU,IAAV,CAAX;AACH;;AAED,eAAOR,YAAYS,IAAZ,CAAiBV,QAAjB,EAA2BE,KAA3B,CAAP;AAEH,KA5BD;;AA8BA,QAAIS,KAAKjC,SAASkB,MAAT,EAAiBH,OAAjB,CAAT;;AAEA,QAAIK,WAAWA,QAAQU,MAAvB,EAA+B;AAC3BV,gBAAQc,OAAR,CAAgB,kBAAU;AACtB,gBAAIC,MAAMC,OAAN,CAAcC,MAAd,CAAJ,EAA2B;AACvBJ,mBAAGZ,GAAH,CAAOiB,KAAP,CAAaL,EAAb,EAAiBI,MAAjB;AACH,aAFD,MAGK;AACDJ,mBAAGZ,GAAH,CAAOgB,MAAP;AACH;AACJ,SAPD;AAQH;;AAEDJ,OAAGZ,GAAH,CAAOlB,sBAAP;;AAEA,QAAIoC,mBAAmBN,GAAGX,QAAH,CAAYkB,KAAZ,CAAkBC,WAAzC;AACAR,OAAGX,QAAH,CAAYkB,KAAZ,CAAkBC,WAAlB,GAAgC,YAAY;AACxC,eAAOrC,kBAAkBmC,iBAAiBD,KAAjB,CAAuB,IAAvB,EAA6BI,SAA7B,CAAlB,CAAP;AACH,KAFD;AAGA,WAAOT,EAAP;AACH,CAtED","file":"markdown.js","sourcesContent":["/**\n * @file markdown\n * @author leon <ludafa@outlook.com>\n */\n\n/* eslint-disable fecs-camelcase, prefer-rest-params, fecs-prefer-destructure, fecs-no-require */\n\nconst markdown = require('markdown-it');\nconst hljs = require('highlight.js');\nconst MarkdownItSanCodeBlock = require('./markdown-it-plugin/SanCodeBlock');\n\n/**\n * 转码 {{}}\n *\n * `{{ }}` => `<span>{{</span> <span>}}</span>`\n *\n * @param  {string} str 源码\n * @return {string}\n */\nfunction replaceDelimiters(str) {\n    return str.replace(/({{|}})/g, '<span>$1</span>');\n}\n\nfunction renderHighlight(str, lang) {\n\n    if (!(lang && hljs.getLanguage(lang))) {\n        return '';\n    }\n\n    try {\n        return replaceDelimiters(hljs.highlight(lang, str, true).value);\n    }\n    catch (err) {}\n\n}\n\nmodule.exports = function (options) {\n\n    options = Object.assign(\n        {\n            preset: 'default',\n            html: true,\n            highlight: renderHighlight\n        },\n        options\n    );\n\n    let preset = options.preset;\n    let plugins = options.use;\n\n    delete options.preset;\n    delete options.use;\n\n    let renderer = markdown.renderer;\n    let renderAttrs = renderer.renderAttrs;\n\n    markdown.renderer.renderAttrs = function (token) {\n\n        if (token.nesting === -1) {\n            return '';\n        }\n\n        let attrs = token.attrs;\n\n        if (!attrs) {\n            attrs = token.attrs = [];\n        }\n\n        let hasClassName = false;\n        for (let i = 0, len = attrs.length; i < len; i++) {\n            if (attrs[i][0] === 'class') {\n                attrs[i][1] += ' md';\n                hasClassName = true;\n                break;\n            }\n        }\n\n\n        if (!hasClassName) {\n            attrs.push(['class', 'md']);\n        }\n\n        return renderAttrs.call(renderer, token);\n\n    };\n\n    let md = markdown(preset, options);\n\n    if (plugins && plugins.length) {\n        plugins.forEach(plugin => {\n            if (Array.isArray(plugin)) {\n                md.use.apply(md, plugin);\n            }\n            else {\n                md.use(plugin);\n            }\n        });\n    }\n\n    md.use(MarkdownItSanCodeBlock);\n\n    let codeInlineRender = md.renderer.rules.code_inline;\n    md.renderer.rules.code_inline = function () {\n        return replaceDelimiters(codeInlineRender.apply(this, arguments));\n    };\n    return md;\n};\n"]}