{"version":3,"sources":["index.js"],"names":["loaderUtils","require","generator","markdown","path","parser","module","exports","source","callback","async","options","Object","assign","getOptions","sanMarkdown","code","render","parse","then","generate","ast","filePath","resourcePath","cacheDir","join","__dirname","moduleName","stringifyRequest","slice"],"mappings":";;AAAA;;;;;AAKA;;AAEA,IAAMA,cAAcC,QAAQ,cAAR,CAApB;AACA,IAAMC,YAAYD,QAAQ,aAAR,CAAlB;AACA,IAAME,WAAWF,QAAQ,YAAR,CAAjB;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;;AAEAK,OAAOC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AAAA;;AAE/B,QAAIC,WAAW,KAAKC,KAAL,EAAf;;AAEA,QAAIC,UAAUC,OAAOC,MAAP,CACVb,YAAYc,UAAZ,CAAuB,IAAvB,KAAgC,EADtB,EAEV,KAAKC,WAFK,EAGV,KAAKJ,OAAL,CAAaI,WAHH,CAAd;;AAMA,QAAIC,OAAOb,SAASQ,OAAT,EAAkBM,MAAlB,CAAyBT,MAAzB,CAAX;;AAEAH,WAAOa,KAAP,CAAaF,IAAb,EAAmBG,IAAnB,CACI,eAAO;AAAA,kCAEcjB,UAAUkB,QAAV,CAAmB;AAChCZ,0BADgC;AAEhCQ,sBAFgC;AAGhCK,oBAHgC;AAIhCC,sBAAU,MAAKC,YAJiB;AAKhCC,sBAAUpB,KAAKqB,IAAL,CAAUC,SAAV,EAAqB,WAArB;AALsB,SAAnB,CAFd;AAAA,YAEEJ,QAFF,uBAEEA,QAFF;;AAUH,YAAIK,aAAa3B,YAAY4B,gBAAZ,QAAmCN,QAAnC,EAA6CO,KAA7C,CAAmD,CAAnD,EAAsD,CAAC,CAAvD,CAAjB;;AAEApB,iBAAS,IAAT,+CAAyDkB,UAAzD;AAEH,KAfL,EAgBIlB,QAhBJ;AAmBH,CA/BD","file":"index.js","sourcesContent":["/**\n * @file san-markdown-loader\n * @author leon <ludafa@outlook.com>\n */\n\n/* eslint-disable fecs-camelcase, prefer-rest-params, fecs-prefer-destructure, fecs-no-require */\n\nconst loaderUtils = require('loader-utils');\nconst generator = require('./generator');\nconst markdown = require('./markdown');\nconst path = require('path');\nconst parser = require('./parser');\n\nmodule.exports = function (source) {\n\n    let callback = this.async();\n\n    let options = Object.assign(\n        loaderUtils.getOptions(this) || {},\n        this.sanMarkdown,\n        this.options.sanMarkdown\n    );\n\n    let code = markdown(options).render(source);\n\n    parser.parse(code).then(\n        ast => {\n\n            let {filePath} = generator.generate({\n                source,\n                code,\n                ast,\n                filePath: this.resourcePath,\n                cacheDir: path.join(__dirname, '../.cache')\n            });\n\n            let moduleName = loaderUtils.stringifyRequest(this, filePath).slice(1, -1);\n\n            callback(null, `module.exports = require('!!san-loader!${moduleName}');`);\n\n        },\n        callback\n    );\n\n};\n"]}