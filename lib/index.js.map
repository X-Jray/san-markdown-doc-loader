{"version":3,"sources":["index.js"],"names":["loaderUtils","require","generator","markdown","path","parser","module","exports","source","callback","async","options","Object","assign","getOptions","sanMarkdown","md","renderer","renderAttrs","token","nesting","attrs","hasClassName","i","len","length","push","call","code","render","parse","then","generate","ast","filePath","resourcePath","cacheDir","join","__dirname","moduleName","stringifyRequest","slice"],"mappings":";;AAAA;;;;;AAKA;;AAEA,IAAMA,cAAcC,QAAQ,cAAR,CAApB;AACA,IAAMC,YAAYD,QAAQ,aAAR,CAAlB;AACA,IAAME,WAAWF,QAAQ,YAAR,CAAjB;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;;AAEAK,OAAOC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;AAAA;;AAE/B,QAAIC,WAAW,KAAKC,KAAL,EAAf;;AAEA,QAAIC,UAAUC,OAAOC,MAAP,CACVb,YAAYc,UAAZ,CAAuB,IAAvB,KAAgC,EADtB,EAEV,KAAKC,WAFK,EAGV,KAAKJ,OAAL,CAAaI,WAHH,CAAd;;AAMA,QAAIC,KAAKb,SAASQ,OAAT,CAAT;;AAEA,QAAIM,WAAWD,GAAGC,QAAlB;AACA,QAAIC,cAAcD,SAASC,WAA3B;;AAEAF,OAAGC,QAAH,CAAYC,WAAZ,GAA0B,UAAUC,KAAV,EAAiB;;AAEvC,YAAIA,MAAMC,OAAN,KAAkB,CAAC,CAAvB,EAA0B;AACtB,mBAAO,EAAP;AACH;;AAED,YAAIC,QAAQF,MAAME,KAAlB;;AAEA,YAAI,CAACA,KAAL,EAAY;AACRA,oBAAQF,MAAME,KAAN,GAAc,EAAtB;AACH;;AAED,YAAIC,eAAe,KAAnB;AACA,aAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMH,MAAMI,MAA5B,EAAoCF,IAAIC,GAAxC,EAA6CD,GAA7C,EAAkD;AAC9C,gBAAIF,MAAME,CAAN,EAAS,CAAT,MAAgB,OAApB,EAA6B;AACzBF,sBAAME,CAAN,EAAS,CAAT,KAAe,KAAf;AACAD,+BAAe,IAAf;AACA;AACH;AACJ;;AAGD,YAAI,CAACA,YAAL,EAAmB;AACfD,kBAAMK,IAAN,CAAW,CAAC,OAAD,EAAU,IAAV,CAAX;AACH;;AAED,eAAOR,YAAYS,IAAZ,CAAiBV,QAAjB,EAA2BE,KAA3B,CAAP;AAEH,KA5BD;;AA8BA,QAAIS,OAAOZ,GAAGa,MAAH,CAAUrB,MAAV,CAAX;;AAGAH,WAAOyB,KAAP,CAAaF,IAAb,EAAmBG,IAAnB,CACI,eAAO;AAAA,kCAEc7B,UAAU8B,QAAV,CAAmB;AAChCxB,0BADgC;AAEhCoB,sBAFgC;AAGhCK,oBAHgC;AAIhCC,sBAAU,MAAKC,YAJiB;AAKhCC,sBAAUhC,KAAKiC,IAAL,CAAUC,SAAV,EAAqB,WAArB;AALsB,SAAnB,CAFd;AAAA,YAEEJ,QAFF,uBAEEA,QAFF;;AAUH,YAAIK,aAAavC,YAAYwC,gBAAZ,QAAmCN,QAAnC,EAA6CO,KAA7C,CAAmD,CAAnD,EAAsD,CAAC,CAAvD,CAAjB;;AAEAhC,iBAAS,IAAT,+CAAyD8B,UAAzD;AAEH,KAfL,EAgBI9B,QAhBJ;AAmBH,CAnED","file":"index.js","sourcesContent":["/**\n * @file san-markdown-loader\n * @author leon <ludafa@outlook.com>\n */\n\n/* eslint-disable fecs-camelcase, prefer-rest-params, fecs-prefer-destructure, fecs-no-require */\n\nconst loaderUtils = require('loader-utils');\nconst generator = require('./generator');\nconst markdown = require('./markdown');\nconst path = require('path');\nconst parser = require('./parser');\n\nmodule.exports = function (source) {\n\n    let callback = this.async();\n\n    let options = Object.assign(\n        loaderUtils.getOptions(this) || {},\n        this.sanMarkdown,\n        this.options.sanMarkdown\n    );\n\n    let md = markdown(options);\n\n    let renderer = md.renderer;\n    let renderAttrs = renderer.renderAttrs;\n\n    md.renderer.renderAttrs = function (token) {\n\n        if (token.nesting === -1) {\n            return '';\n        }\n\n        let attrs = token.attrs;\n\n        if (!attrs) {\n            attrs = token.attrs = [];\n        }\n\n        let hasClassName = false;\n        for (let i = 0, len = attrs.length; i < len; i++) {\n            if (attrs[i][0] === 'class') {\n                attrs[i][1] += ' md';\n                hasClassName = true;\n                break;\n            }\n        }\n\n\n        if (!hasClassName) {\n            attrs.push(['class', 'md']);\n        }\n\n        return renderAttrs.call(renderer, token);\n\n    };\n\n    let code = md.render(source);\n\n\n    parser.parse(code).then(\n        ast => {\n\n            let {filePath} = generator.generate({\n                source,\n                code,\n                ast,\n                filePath: this.resourcePath,\n                cacheDir: path.join(__dirname, '../.cache')\n            });\n\n            let moduleName = loaderUtils.stringifyRequest(this, filePath).slice(1, -1);\n\n            callback(null, `module.exports = require('!!san-loader!${moduleName}');`);\n\n        },\n        callback\n    );\n\n};\n"]}